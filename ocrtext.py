import numpy as np
import cv2
import cv2
from pytesseract import Output
import pytesseract
from PIL import Image
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe'



def extract_region_from_coordinates(original_image, coordinates):
    # 좌표를 numpy 배열로 변환
    coordinates_np = np.array(coordinates, dtype=np.int32)

    # 좌표를 감싸는 최소 사각형을 얻기
    rect = cv2.boundingRect(coordinates_np)

    # 이미지에서 해당 부분을 추출
    extracted_region = original_image[rect[1]:rect[1] + rect[3], rect[0]:rect[0] + rect[2]]

    return extracted_region

# 예제: 원본 이미지와 주어진 좌표


list = [[[1440.625, 997.0000610351562], [1437.5, 1000.1250610351562], [1437.5, 1215.75], [1440.625, 1218.875], [1596.875, 1218.875], [1600.0, 1215.75], [1603.125, 1215.75], [1603.125, 1209.5], [1606.25, 1206.375], [1606.25, 1187.625], [1603.125, 1184.5], [1603.125, 1165.75], [1606.25, 1162.625], [1606.25, 1000.1250610351562], [1603.125, 997.0000610351562]], [[1203.125, 997.0000610351562], [1200.0, 1000.1250610351562], [1200.0, 1165.75], [1203.125, 1168.875], [1293.75, 1168.875], [1300.0, 1175.125], [1300.0, 1215.75], [1303.125, 1218.875], [1312.5, 1218.875], [1315.625, 1222.0], [1328.125, 1222.0], [1331.25, 1218.875], [1418.75, 1218.875], [1421.875, 1215.75], [1421.875, 1031.375], [1425.0, 1028.25], [1425.0, 1003.2500610351562], [1418.75, 997.0000610351562]], [[1765.625, 897.0000610351562], [1762.5, 900.1250610351562], [1762.5, 953.2500610351562], [1759.375, 956.3750610351562], [1759.375, 965.7500610351562], [1756.25, 968.8750610351562], [1756.25, 975.1250610351562], [1750.0, 981.3750610351562], [1746.875, 981.3750610351562], [1743.75, 984.5000610351562], [1615.625, 984.5000610351562], [1612.5, 987.6250610351562], [1612.5, 1215.75], [1615.625, 1218.875], [1621.875, 1218.875], [1625.0, 1222.0], [1768.75, 1222.0], [1771.875, 1225.125], [1784.375, 1225.125], [1787.5, 1228.25], 
[1803.125, 1228.25], [1806.25, 1225.125], [1806.25, 1222.0], [1809.375, 1218.875], [1809.375, 903.2500610351562], [1803.125, 897.0000610351562]], [[1540.625, 447.0], [1537.5, 450.125], [1537.5, 618.875], [1540.625, 622.0], [1540.625, 625.125], [1543.75, 628.25], [1703.125, 628.25], [1706.25, 625.125], [1740.625, 625.125], [1743.75, 622.0], [1743.75, 618.875], [1746.875, 615.75], [1746.875, 450.125], [1743.75, 447.0]], [[1240.625, 447.0], [1237.5, 450.125], [1237.5, 528.25], [1234.375, 531.375], [1234.375, 534.5], [1228.125, 540.75], [1225.0, 540.75], [1221.875, 543.875], [1218.75, 543.875], [1212.5, 550.125], [1212.5, 718.875], [1215.625, 722.0], [1215.625, 734.5], [1218.75, 737.625], [1218.75, 747.0], [1215.625, 750.125], [1215.625, 790.75], [1218.75, 793.875], [1259.375, 793.875], [1262.5, 797.0], [1265.625, 797.0], [1271.875, 790.75], [1271.875, 712.625], [1275.0, 709.5], [1275.0, 653.25], [1278.125, 650.125], [1278.125, 637.625], [1287.5, 628.25], 
[1290.625, 628.25], [1293.75, 625.125], [1368.75, 625.125], [1368.75, 622.0], [1371.875, 618.875], [1371.875, 450.125], [1368.75, 447.0]], [[1315.625, 659.5], [1312.5, 662.625], [1312.5, 812.6250610351562], [1318.75, 818.8750610351562], [1334.375, 818.8750610351562], [1337.5, 815.7500610351562], [1343.75, 815.7500610351562], [1346.875, 818.8750610351562], [1359.375, 818.8750610351562], [1362.5, 815.7500610351562], [1484.375, 815.7500610351562], [1487.5, 818.8750610351562], [1490.625, 818.8750610351562], [1496.875, 812.6250610351562], [1496.875, 662.625], [1493.75, 659.5]], [[1390.625, 447.0], [1387.5, 450.125], [1387.5, 618.875], [1390.625, 622.0], [1390.625, 628.25], [1400.0, 628.25], [1403.125, 625.125], [1465.625, 625.125], [1468.75, 622.0], [1503.125, 622.0], [1506.25, 625.125], [1518.75, 625.125], [1518.75, 622.0], [1521.875, 618.875], [1521.875, 615.75], [1525.0, 612.625], [1525.0, 537.625], [1528.125, 534.5], [1528.125, 462.625], [1531.25, 459.5], [1531.25, 450.125], [1528.125, 450.125], [1525.0, 447.0]], [[365.625, 484.5], [362.5, 487.625], [362.5, 662.625], [356.25, 668.875], [315.625, 668.875], [312.5, 665.75], [271.875, 665.75], [268.75, 662.625], [109.375, 662.625], [106.25, 659.5], [34.375, 659.5], [31.25, 662.625], [28.125, 662.625], [28.125, 665.75], [25.0, 668.875], [25.0, 975.1250610351562], [31.25, 981.3750610351562], [50.0, 981.3750610351562], [53.125, 984.5000610351562], [62.5, 984.5000610351562], [65.625, 981.3750610351562], [159.375, 981.3750610351562], [162.5, 984.5000610351562], [296.875, 984.5000610351562], [300.0, 981.3750610351562], [309.375, 981.3750610351562], [312.5, 984.5000610351562], [328.125, 984.5000610351562], [331.25, 981.3750610351562], [356.25, 981.3750610351562], [359.375, 984.5000610351562], [359.375, 997.0000610351562], [362.5, 1000.1250610351562], [362.5, 1131.375], [359.375, 1134.5], [359.375, 1140.75], [362.5, 1143.875], [362.5, 1150.125], [365.625, 1153.25], [425.0, 1153.25], [428.125, 1150.125], [431.25, 1150.125], [434.375, 1153.25], [450.0, 1153.25], [453.125, 1150.125], [456.25, 1150.125], [459.375, 1153.25], [668.75, 1153.25], [671.875, 1150.125], [671.875, 1147.0], [675.0, 1143.875], [675.0, 1140.75], [678.125, 1137.625], [678.125, 1037.625], [681.25, 1034.5], [681.25, 987.6250610351562], [684.375, 984.5000610351562], [687.5, 984.5000610351562], [690.625, 981.3750610351562], [881.25, 981.3750610351562], [884.375, 984.5000610351562], [1006.25, 984.5000610351562], [1009.375, 987.6250610351562], [1021.875, 987.6250610351562], [1025.0, 990.7500610351562], [1028.125, 990.7500610351562], [1034.375, 984.5000610351562], [1037.5, 984.5000610351562], [1040.625, 981.3750610351562], [1040.625, 978.2500610351562], [1043.75, 975.1250610351562], [1043.75, 943.8750610351562], [1040.625, 940.7500610351562], [1040.625, 893.8750610351562], [1037.5, 890.7500610351562], [1037.5, 872.0000610351562], [1040.625, 868.8750610351562], [1040.625, 865.7500610351562], [1043.75, 862.6250610351562], [1043.75, 850.1250610351562], [1040.625, 847.0000610351562], [1040.625, 800.1250610351562], [1043.75, 797.0], [1043.75, 681.375], [1046.875, 678.25], [1046.875, 675.125], [1043.75, 672.0], [1043.75, 662.625], [1040.625, 659.5], [1037.5, 659.5], [1034.375, 656.375], [1028.125, 656.375], [1025.0, 653.25], [1003.125, 653.25], [1000.0, 656.375], [984.375, 656.375], [981.25, 659.5], [775.0, 659.5], [771.875, 662.625], [712.5, 662.625], [709.375, 665.75], [700.0, 665.75], [696.875, 662.625], [690.625, 662.625], [681.25, 653.25], [681.25, 631.375], [678.125, 628.25], [678.125, 490.75], [671.875, 484.5]], [[1540.625, 659.5], [1537.5, 662.625], [1537.5, 753.25], [1540.625, 756.375], [1818.75, 756.375], [1821.875, 753.25], [1821.875, 712.625], [1825.0, 709.5], [1825.0, 665.75], [1818.75, 659.5]], [[1540.625, 847.0000610351562], [1537.5, 850.1250610351562], [1537.5, 950.1250610351562], [1543.75, 956.3750610351562], [1687.5, 956.3750610351562], [1690.625, 953.2500610351562], [1718.75, 953.2500610351562], [1721.875, 950.1250610351562], [1721.875, 868.8750610351562], [1725.0, 865.7500610351562], [1725.0, 853.2500610351562], [1718.75, 847.0000610351562]], [[1315.625, 847.0000610351562], [1312.5, 850.1250610351562], [1312.5, 950.1250610351562], [1318.75, 956.3750610351562], [1490.625, 956.3750610351562], [1496.875, 950.1250610351562], [1496.875, 850.1250610351562], [1493.75, 847.0000610351562]]]

#마스크 부분의 text 얻어내기
def ocr_text(list):
    original_image = cv2.imread("C:/ai_test/dataset/image/img12.jpg")  # 원본 이미지 로드
    coordinates = list

    # 이미지 부분 추출
    extracted_region = extract_region_from_coordinates(original_image, coordinates)

    #한국어가 없을 때 영어가 있는지 확인
    result = pytesseract.image_to_string(extracted_region, lang='kor')
    if(result==''):
        result = pytesseract.image_to_string(extracted_region, lang='eng')
    
    return result



ouput_txt ={}
for i in range(len(list)-1):
    text =ocr_text(list[i])
    ouput_txt["points{}".format(i)]=text

print(ouput_txt)


# # 추출된 부분을 디스플레이
# cv2.imshow("Extracted Region", extracted_region)
# cv2.waitKey(0)
# cv2.destroyAllWindows()